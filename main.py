import os
import time
import openai
from fastapi import FastAPI, Request
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_ID = os.getenv("OWNER_ID")

bot = Bot(BOT_TOKEN)
openai.api_key = OPENAI_API_KEY

start_time = time.time()
app = FastAPI()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø GPT-–±–æ—Ç ü§ñ –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

# /help
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/ask <–≤–æ–ø—Ä–æ—Å> - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT\n"
        "/uptime - —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç\n"
        "/say <—Ç–µ–∫—Å—Ç> - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

# /uptime
async def uptime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    seconds = int(time.time() - start_time)
    await update.message.reply_text(f"‚è± –ê–ø—Ç–∞–π–º: {seconds} —Å–µ–∫—É–Ω–¥")

# /say
async def say(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ' '.join(context.args)
    if text:
        await update.message.reply_text(text)
    else:
        await update.message.reply_text("–ü—É—Å—Ç–æ. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /say")

# /ask (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI)
async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    if OWNER_ID and user_id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ GPT.")
        return

    question = ' '.join(context.args)
    if not question:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ask")
        return

    await update.message.reply_text("‚úçÔ∏è –î—É–º–∞—é...")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": question}]
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("help", help_cmd))
telegram_app.add_handler(CommandHandler("uptime", uptime))
telegram_app.add_handler(CommandHandler("say", say))
telegram_app.add_handler(CommandHandler("ask", ask))

# FastAPI Webhook
@app.post("/webhook")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot)
    await telegram_app.process_update(update)
    return {"ok": True}

# –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
@app.get("/")
def root():
    return {"message": "GPT-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"}
